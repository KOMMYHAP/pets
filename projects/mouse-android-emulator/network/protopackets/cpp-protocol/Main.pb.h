// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Main.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Main_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Main_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "PacketsId.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Main_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Main_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Main_2eproto;
namespace my {
namespace proto {
namespace package {
class MouseClickMessage;
struct MouseClickMessageDefaultTypeInternal;
extern MouseClickMessageDefaultTypeInternal _MouseClickMessage_default_instance_;
class MousePositionMessage;
struct MousePositionMessageDefaultTypeInternal;
extern MousePositionMessageDefaultTypeInternal _MousePositionMessage_default_instance_;
}  // namespace package
}  // namespace proto
}  // namespace my
PROTOBUF_NAMESPACE_OPEN
template<> ::my::proto::package::MouseClickMessage* Arena::CreateMaybeMessage<::my::proto::package::MouseClickMessage>(Arena*);
template<> ::my::proto::package::MousePositionMessage* Arena::CreateMaybeMessage<::my::proto::package::MousePositionMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace my {
namespace proto {
namespace package {

enum MouseClickMessage_ButtonType : int {
  MouseClickMessage_ButtonType_LEFT_BUTTON = 0,
  MouseClickMessage_ButtonType_RIGHT_BUTTON = 1,
  MouseClickMessage_ButtonType_MouseClickMessage_ButtonType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MouseClickMessage_ButtonType_MouseClickMessage_ButtonType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MouseClickMessage_ButtonType_IsValid(int value);
constexpr MouseClickMessage_ButtonType MouseClickMessage_ButtonType_ButtonType_MIN = MouseClickMessage_ButtonType_LEFT_BUTTON;
constexpr MouseClickMessage_ButtonType MouseClickMessage_ButtonType_ButtonType_MAX = MouseClickMessage_ButtonType_RIGHT_BUTTON;
constexpr int MouseClickMessage_ButtonType_ButtonType_ARRAYSIZE = MouseClickMessage_ButtonType_ButtonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseClickMessage_ButtonType_descriptor();
template<typename T>
inline const std::string& MouseClickMessage_ButtonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MouseClickMessage_ButtonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MouseClickMessage_ButtonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MouseClickMessage_ButtonType_descriptor(), enum_t_value);
}
inline bool MouseClickMessage_ButtonType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MouseClickMessage_ButtonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MouseClickMessage_ButtonType>(
    MouseClickMessage_ButtonType_descriptor(), name, value);
}
// ===================================================================

class MousePositionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:my.proto.package.MousePositionMessage) */ {
 public:
  inline MousePositionMessage() : MousePositionMessage(nullptr) {}
  ~MousePositionMessage() override;
  explicit constexpr MousePositionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MousePositionMessage(const MousePositionMessage& from);
  MousePositionMessage(MousePositionMessage&& from) noexcept
    : MousePositionMessage() {
    *this = ::std::move(from);
  }

  inline MousePositionMessage& operator=(const MousePositionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MousePositionMessage& operator=(MousePositionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MousePositionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MousePositionMessage* internal_default_instance() {
    return reinterpret_cast<const MousePositionMessage*>(
               &_MousePositionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MousePositionMessage& a, MousePositionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MousePositionMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MousePositionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MousePositionMessage* New() const final {
    return new MousePositionMessage();
  }

  MousePositionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MousePositionMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MousePositionMessage& from);
  void MergeFrom(const MousePositionMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MousePositionMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "my.proto.package.MousePositionMessage";
  }
  protected:
  explicit MousePositionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:my.proto.package.MousePositionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Main_2eproto;
};
// -------------------------------------------------------------------

class MouseClickMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:my.proto.package.MouseClickMessage) */ {
 public:
  inline MouseClickMessage() : MouseClickMessage(nullptr) {}
  ~MouseClickMessage() override;
  explicit constexpr MouseClickMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MouseClickMessage(const MouseClickMessage& from);
  MouseClickMessage(MouseClickMessage&& from) noexcept
    : MouseClickMessage() {
    *this = ::std::move(from);
  }

  inline MouseClickMessage& operator=(const MouseClickMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseClickMessage& operator=(MouseClickMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MouseClickMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MouseClickMessage* internal_default_instance() {
    return reinterpret_cast<const MouseClickMessage*>(
               &_MouseClickMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MouseClickMessage& a, MouseClickMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseClickMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MouseClickMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MouseClickMessage* New() const final {
    return new MouseClickMessage();
  }

  MouseClickMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MouseClickMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MouseClickMessage& from);
  void MergeFrom(const MouseClickMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseClickMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "my.proto.package.MouseClickMessage";
  }
  protected:
  explicit MouseClickMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MouseClickMessage_ButtonType ButtonType;
  static constexpr ButtonType LEFT_BUTTON =
    MouseClickMessage_ButtonType_LEFT_BUTTON;
  static constexpr ButtonType RIGHT_BUTTON =
    MouseClickMessage_ButtonType_RIGHT_BUTTON;
  static inline bool ButtonType_IsValid(int value) {
    return MouseClickMessage_ButtonType_IsValid(value);
  }
  static constexpr ButtonType ButtonType_MIN =
    MouseClickMessage_ButtonType_ButtonType_MIN;
  static constexpr ButtonType ButtonType_MAX =
    MouseClickMessage_ButtonType_ButtonType_MAX;
  static constexpr int ButtonType_ARRAYSIZE =
    MouseClickMessage_ButtonType_ButtonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ButtonType_descriptor() {
    return MouseClickMessage_ButtonType_descriptor();
  }
  template<typename T>
  static inline const std::string& ButtonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ButtonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ButtonType_Name.");
    return MouseClickMessage_ButtonType_Name(enum_t_value);
  }
  static inline bool ButtonType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ButtonType* value) {
    return MouseClickMessage_ButtonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kButtonFieldNumber = 1,
  };
  // .my.proto.package.MouseClickMessage.ButtonType button = 1;
  void clear_button();
  ::my::proto::package::MouseClickMessage_ButtonType button() const;
  void set_button(::my::proto::package::MouseClickMessage_ButtonType value);
  private:
  ::my::proto::package::MouseClickMessage_ButtonType _internal_button() const;
  void _internal_set_button(::my::proto::package::MouseClickMessage_ButtonType value);
  public:

  // @@protoc_insertion_point(class_scope:my.proto.package.MouseClickMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int button_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Main_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MousePositionMessage

// float x = 1;
inline void MousePositionMessage::clear_x() {
  x_ = 0;
}
inline float MousePositionMessage::_internal_x() const {
  return x_;
}
inline float MousePositionMessage::x() const {
  // @@protoc_insertion_point(field_get:my.proto.package.MousePositionMessage.x)
  return _internal_x();
}
inline void MousePositionMessage::_internal_set_x(float value) {
  
  x_ = value;
}
inline void MousePositionMessage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:my.proto.package.MousePositionMessage.x)
}

// float y = 2;
inline void MousePositionMessage::clear_y() {
  y_ = 0;
}
inline float MousePositionMessage::_internal_y() const {
  return y_;
}
inline float MousePositionMessage::y() const {
  // @@protoc_insertion_point(field_get:my.proto.package.MousePositionMessage.y)
  return _internal_y();
}
inline void MousePositionMessage::_internal_set_y(float value) {
  
  y_ = value;
}
inline void MousePositionMessage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:my.proto.package.MousePositionMessage.y)
}

// -------------------------------------------------------------------

// MouseClickMessage

// .my.proto.package.MouseClickMessage.ButtonType button = 1;
inline void MouseClickMessage::clear_button() {
  button_ = 0;
}
inline ::my::proto::package::MouseClickMessage_ButtonType MouseClickMessage::_internal_button() const {
  return static_cast< ::my::proto::package::MouseClickMessage_ButtonType >(button_);
}
inline ::my::proto::package::MouseClickMessage_ButtonType MouseClickMessage::button() const {
  // @@protoc_insertion_point(field_get:my.proto.package.MouseClickMessage.button)
  return _internal_button();
}
inline void MouseClickMessage::_internal_set_button(::my::proto::package::MouseClickMessage_ButtonType value) {
  
  button_ = value;
}
inline void MouseClickMessage::set_button(::my::proto::package::MouseClickMessage_ButtonType value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:my.proto.package.MouseClickMessage.button)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace package
}  // namespace proto
}  // namespace my

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::my::proto::package::MouseClickMessage_ButtonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::my::proto::package::MouseClickMessage_ButtonType>() {
  return ::my::proto::package::MouseClickMessage_ButtonType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Main_2eproto
